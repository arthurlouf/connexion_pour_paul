// server/controllers/authController.js

const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const db = require('../config/database');
const nodemailer = require('nodemailer');
require('dotenv').config();

// ‚úÖ Configuration du transporteur d'emails
const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: process.env.EMAIL_PORT,
    secure: false,
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
    },
    tls: {
        rejectUnauthorized: false
    }
});

// ‚úÖ R√¥les valides
const VALID_ROLES = ["agent", "proprietaire", "locataire"];

// üîë Fonction de connexion
async function login(req, res) {
    const { email, password } = req.body;

    try {
        db.query(
            `SELECT u.id_utilisateur, u.nom, u.prenom, u.email, u.mot_de_passe, u.is_verified, GROUP_CONCAT(r.nom_role) AS roles
            FROM utilisateurs u
            JOIN utilisateur_roles ur ON u.id_utilisateur = ur.id_utilisateur
            JOIN roles r ON ur.id_role = r.id_role
            WHERE u.email = ?
            GROUP BY u.id_utilisateur`,
            [email],
            async (err, results) => {
                if (err) {
                    console.error("Erreur serveur :", err);
                    return res.status(500).json({ error: "Erreur serveur." });
                }

                if (results.length === 0) {
                    return res.status(401).json({ error: "Email ou mot de passe incorrect." });
                }

                const user = results[0];

                if (user.is_verified != 1) {
                    return res.status(403).json({ error: "Votre compte n'est pas encore v√©rifi√©." });
                }

                const isMatch = await bcrypt.compare(password, user.mot_de_passe);

                if (!isMatch) {
                    return res.status(401).json({ error: "Email ou mot de passe incorrect." });
                }

                const token = jwt.sign(
                    { id: user.id_utilisateur, roles: user.roles.split(",") },
                    process.env.JWT_SECRET,
                    { expiresIn: '1h' }
                );

                res.status(200).json({
                    message: "Connexion r√©ussie",
                    token,
                    user: {
                        id: user.id_utilisateur,
                        nom: user.nom,
                        prenom: user.prenom,
                        roles: user.roles.split(",")
                    }
                });
            }
        );
    } catch (error) {
        console.error("Erreur serveur :", error);
        res.status(500).json({ error: "Erreur serveur." });
    }
}

// üîë Fonction d'inscription avec gestion des multi-r√¥les
async function register(req, res) {
    const { nom, prenom, email, password, confirmPassword, telephone } = req.body;
    const { type } = req.params;

    if (!VALID_ROLES.includes(type)) {
        return res.status(400).json({ error: "R√¥le invalide." });
    }

    if (password !== confirmPassword) {
        return res.status(400).json({ error: "Les mots de passe ne correspondent pas." });
    }

    try {
        // V√©rification de l'existence de l'utilisateur
        db.query(
            `SELECT u.id_utilisateur, u.email, GROUP_CONCAT(r.nom_role) AS roles
            FROM utilisateurs u
            LEFT JOIN utilisateur_roles ur ON u.id_utilisateur = ur.id_utilisateur
            LEFT JOIN roles r ON ur.id_role = r.id_role
            WHERE u.email = ? OR u.telephone = ?
            GROUP BY u.id_utilisateur`,
            [email, telephone],
            async (err, results) => {
                if (err) {
                    console.error("Erreur serveur :", err);
                    return res.status(500).json({ error: "Erreur lors de la v√©rification des donn√©es." });
                }

                // ‚úÖ Ajout de r√¥le si l'utilisateur existe d√©j√†
                if (results.length > 0) {
                    const existingRoles = results[0].roles ? results[0].roles.split(",") : [];
                    
                    // üîç V√©rifie si le r√¥le est d√©j√† associ√©
                    if (existingRoles.includes(type)) {
                        return res.status(409).json({ error: `Cet utilisateur est d√©j√† enregistr√© en tant que ${type}.` });
                    }

                    const userId = results[0].id_utilisateur;
                    db.query(
                        `SELECT id_role FROM roles WHERE nom_role = ?`,
                        [type],
                        (err, roleResults) => {
                            if (err || roleResults.length === 0) {
                                console.error("Erreur de r√¥le :", err);
                                return res.status(500).json({ error: "Erreur lors de l'association du r√¥le." });
                            }

                            const roleId = roleResults[0].id_role;

                            db.query(
                                `INSERT INTO utilisateur_roles (id_utilisateur, id_role) VALUES (?, ?)`,
                                [userId, roleId],
                                (err) => {
                                    if (err) {
                                        console.error("Erreur d'association de r√¥le :", err);
                                        return res.status(500).json({ error: "Erreur lors de l'association du r√¥le." });
                                    }

                                    res.status(201).json({ message: `‚úÖ R√¥le ${type} ajout√© avec succ√®s.` });
                                }
                            );
                        }
                    );

                    return;
                }
                // ‚úÖ Cr√©ation d'un nouvel utilisateur
                const hashedPassword = await bcrypt.hash(password, 10);
                const verificationToken = require('crypto').randomBytes(32).toString('hex');

                db.query(
                    `INSERT INTO utilisateurs (nom, prenom, email, mot_de_passe, telephone, verification_token, is_verified) 
                     VALUES (?, ?, ?, ?, ?, ?, 0)`,
                    [nom, prenom, email, hashedPassword, telephone, verificationToken],
                    (err, result) => {
                        if (err) {
                            console.error("Erreur serveur :", err);
                            return res.status(500).json({ error: "Erreur lors de la cr√©ation du compte." });
                        }

                        const userId = result.insertId;

                        db.query(
                            `SELECT id_role FROM roles WHERE nom_role = ?`,
                            [type],
                            (err, roleResults) => {
                                if (err || roleResults.length === 0) {
                                    console.error("Erreur de r√¥le :", err);
                                    return res.status(500).json({ error: "Erreur lors de l'association du r√¥le." });
                                }

                                const roleId = roleResults[0].id_role;

                                db.query(
                                    `INSERT INTO utilisateur_roles (id_utilisateur, id_role) VALUES (?, ?)`,
                                    [userId, roleId],
                                    (err) => {
                                        if (err) {
                                            console.error("Erreur d'association de r√¥le :", err);
                                            return res.status(500).json({ error: "Erreur lors de l'association du r√¥le." });
                                        }

                                        const verificationUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/verify/${verificationToken}`;
                                        const mailOptions = {
                                            from: process.env.EMAIL_USER,
                                            to: email,
                                            subject: "V√©rification de votre compte",
                                            html: `<p>Veuillez v√©rifier votre compte en cliquant sur ce lien : <a href="${verificationUrl}">Cliquez ici</a></p>`
                                        };

                                        transporter.sendMail(mailOptions, (error) => {
                                            if (error) {
                                                console.error("Erreur d'envoi d'email :", error);
                                                return res.status(500).json({ error: "Erreur lors de l'envoi de l'email de v√©rification." });
                                            }

                                            res.status(201).json({ message: "Compte cr√©√© avec succ√®s. V√©rifiez votre email pour confirmer l'inscription." });
                                        });
                                    }
                                );
                            }
                        );
                    }
                );
            }
        );
    } catch (error) {
        console.error("Erreur serveur :", error);
        res.status(500).json({ error: "Erreur serveur." });
    }
}

// ‚úÖ Fonction de v√©rification d'email avec logs d√©taill√©s
function verifyEmail(req, res) {
    const { token } = req.params;
    console.log("üîç D√©but de la v√©rification du token :", token);

    // V√©rifie que le token est fourni
    if (!token) {
        console.log("‚ö†Ô∏è Token non fourni !");
        return res.status(400).json({ error: "‚ö†Ô∏è Aucun token fourni." });
    }

    db.query(
        `SELECT id_utilisateur, is_verified, verification_token FROM utilisateurs WHERE verification_token = ?`,
        [token],
        (err, results) => {
            console.log("üîÑ 1 - Requ√™te SQL ex√©cut√©e pour trouver le token");
            if (err) {
                console.error("üö® Erreur serveur lors de la v√©rification :", err);
                return res.status(500).json({ error: "üö® Erreur serveur." });
            }

            console.log("üîé R√©sultats de la recherche du token :", results);

            // V√©rifie si le token est trouv√©
            if (results.length === 0) {
                console.log("‚ö†Ô∏è Token non trouv√© ou d√©j√† utilis√© :", token);
                return res.status(400).json({ error: "‚ö†Ô∏è Lien de v√©rification invalide ou expir√©." });
            }

            const user = results[0];
            console.log("‚úÖ Utilisateur trouv√© :", user.id_utilisateur, ", v√©rifi√© :", user.is_verified);

            // V√©rifie si le compte est d√©j√† v√©rifi√©
            if (user.is_verified === 1) {
                console.log("‚ö†Ô∏è Compte d√©j√† v√©rifi√© :", user.id_utilisateur);
                return res.status(200).json({ message: "‚úÖ Votre compte est d√©j√† v√©rifi√©." });
            }

            // ‚úÖ Marque le compte comme v√©rifi√©
            db.query(
                `UPDATE utilisateurs SET is_verified = 1, verification_token = NULL WHERE id_utilisateur = ?`,
                [user.id_utilisateur],
                (err) => {
                    console.log("üîÑ 2 - D√©but de la mise √† jour de l'utilisateur");
                    if (err) {
                        console.error("üö® Erreur serveur lors de la mise √† jour :", err);
                        return res.status(500).json({ error: "üö® Erreur serveur." });
                    }

                    console.log("üîÑ 3 - Requ√™te SQL ex√©cut√©e pour mettre √† jour l'utilisateur");
                    console.log("‚úÖ Compte v√©rifi√© avec succ√®s :", user.id_utilisateur);
                    console.log("üõë Fin du traitement, pas de double v√©rification");
                    res.status(200).json({ message: "‚úÖ Votre compte a √©t√© v√©rifi√© avec succ√®s." });
                }
            );
        }
    );
}
// üîë Fonction pour demander un lien de r√©initialisation
async function forgotPassword(req, res) {
    const { email } = req.body;

    try {
        const resetToken = jwt.sign({ email }, process.env.JWT_SECRET, { expiresIn: '1h' });
        const resetUrl = `${process.env.FRONTEND_URL}/reset-password/${resetToken}`;

        const mailOptions = {
            from: process.env.EMAIL_USER,
            to: email,
            subject: "R√©initialisation de votre mot de passe",
            html: `<p>Cliquez sur ce lien pour r√©initialiser votre mot de passe : <a href="${resetUrl}">${resetUrl}</a></p>`
        };

        transporter.sendMail(mailOptions, (error) => {
            if (error) {
                console.error("Erreur lors de l'envoi de l'email :", error);
                return res.status(500).json({ error: "Erreur lors de l'envoi de l'email." });
            }

            res.status(200).json({ message: "Un lien de r√©initialisation a √©t√© envoy√© √† votre adresse email." });
        });
    } catch (error) {
        console.error("Erreur serveur :", error);
        res.status(500).json({ error: "Erreur serveur." });
    }
}

// üîë Fonction pour r√©initialiser le mot de passe
async function resetPassword(req, res) {
    const { token } = req.params;
    const { password, confirmPassword } = req.body;

    if (password !== confirmPassword) {
        return res.status(400).json({ error: "Les mots de passe ne correspondent pas." });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const hashedPassword = await bcrypt.hash(password, 10);

        db.query(
            `UPDATE utilisateurs SET mot_de_passe = ? WHERE email = ?`,
            [hashedPassword, decoded.email],
            (err) => {
                if (err) {
                    console.error("Erreur serveur :", err);
                    return res.status(500).json({ error: "Erreur lors de la r√©initialisation du mot de passe." });
                }

                res.status(200).json({ message: "Votre mot de passe a √©t√© r√©initialis√© avec succ√®s." });
            }
        );
    } catch (error) {
        console.error("Token invalide ou expir√© :", error);
        res.status(400).json({ error: "Le lien de r√©initialisation est invalide ou a expir√©." });
    }
}

// ‚úÖ Fonction pour envoyer un lien de confirmation pour l'ajout de r√¥le
function requestRoleConfirmation(req, res) {
    const { email, role } = req.body;

    // V√©rifie si le r√¥le est valide
    const validRoles = ["agent", "proprietaire", "locataire"];
    if (!validRoles.includes(role)) {
        return res.status(400).json({ error: "R√¥le invalide." });
    }

    // V√©rifie si l'utilisateur existe d√©j√†
    db.query(
        `SELECT u.id_utilisateur, u.email, GROUP_CONCAT(r.nom_role) AS roles
        FROM utilisateurs u
        LEFT JOIN utilisateur_roles ur ON u.id_utilisateur = ur.id_utilisateur
        LEFT JOIN roles r ON ur.id_role = r.id_role
        WHERE u.email = ?
        GROUP BY u.id_utilisateur`,
        [email],
        (err, results) => {
            if (err) {
                console.error("Erreur serveur :", err);
                return res.status(500).json({ error: "Erreur serveur." });
            }

            if (results.length === 0) {
                return res.status(404).json({ error: "Utilisateur non trouv√©." });
            }

            const user = results[0];
            const existingRoles = user.roles ? user.roles.split(",") : [];

            // V√©rifie si l'utilisateur a d√©j√† ce r√¥le
            if (existingRoles.includes(role)) {
                return res.status(409).json({ error: `Cet utilisateur est d√©j√† enregistr√© en tant que ${role}.` });
            }

            // ‚úÖ G√©n√®re un token de confirmation
            const token = jwt.sign(
                { id: user.id_utilisateur, role },
                process.env.JWT_SECRET,
                { expiresIn: '1h' }
            );

            // ‚úÖ Envoie l'email de confirmation
            const verificationUrl = `${process.env.FRONTEND_URL}/confirm-role/${token}`;
            const mailOptions = {
                from: process.env.EMAIL_USER,
                to: email,
                subject: "Confirmation de l'ajout de r√¥le",
                html: `<p>Veuillez cliquer sur ce lien pour confirmer l'ajout du r√¥le <strong>${role}</strong> : <a href="${verificationUrl}">Confirmer le r√¥le</a></p>`
            };

            transporter.sendMail(mailOptions, (error) => {
                if (error) {
                    console.error("Erreur d'envoi d'email :", error);
                    return res.status(500).json({ error: "Erreur lors de l'envoi de l'email de confirmation." });
                }

                console.log("‚úÖ Email de confirmation envoy√© avec succ√®s.");
                res.status(200).json({ message: "‚úÖ Email de confirmation envoy√© avec succ√®s." });
            });
        }
    );
}

// ‚úÖ Fonction pour confirmer l'ajout de r√¥le
function confirmRole(req, res) {
    const { token } = req.params;

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const { id, role } = decoded;

        // Ajout du r√¥le
        db.query(
            `SELECT id_role FROM roles WHERE nom_role = ?`,
            [role],
            (err, roleResults) => {
                if (err || roleResults.length === 0) {
                    console.error("Erreur de r√¥le :", err);
                    return res.status(500).json({ error: "Erreur lors de l'association du r√¥le." });
                }

                const roleId = roleResults[0].id_role;

                db.query(
                    `INSERT INTO utilisateur_roles (id_utilisateur, id_role) VALUES (?, ?)`,
                    [id, roleId],
                    (err) => {
                        if (err) {
                            console.error("Erreur d'association de r√¥le :", err);
                            return res.status(500).json({ error: "Erreur lors de l'association du r√¥le." });
                        }

                        res.status(200).json({ message: `‚úÖ R√¥le ${role} ajout√© avec succ√®s.` });
                    }
                );
            }
        );
    } catch (error) {
        console.error("Token invalide ou expir√© :", error);
        res.status(400).json({ error: "Le lien de confirmation est invalide ou a expir√©." });
    }
}

// üîë Exports
module.exports = {
    register,
    login,
    verifyEmail,
    forgotPassword,
    resetPassword,
    requestRoleConfirmation,
    confirmRole,
};